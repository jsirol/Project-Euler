package EulerSolutions

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

import scala.annotation.tailrec

object PE_002 extends App {
  val fourMillion = 4 * 1000 * 1000

  def evenFiboSum(maxTerm: Int): Int = {
    @tailrec
    def fiboIter(acc: Int, previous: Int, previous2: Int): Int = {
      val current = previous + previous2
      if (current >= maxTerm)
        acc
      else if (current % 2 == 0)
        fiboIter(acc + current, current, previous)
      else
        fiboIter(acc, current, previous)
    }
    fiboIter(0, 1, 1)
  }


  val t0 = System.nanoTime()
  println("Result: " + evenFiboSum(fourMillion)) // 4613732
  println("Elapsed time: " + (System.nanoTime() - t0) / 1e9 + "s")
}
